generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  username   String
  loginId    String     @unique
  password   String
  email      String?    @unique
  phone      String?    @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  smsToken   SMSToken[]
  products   Product[]
  chatRooms  ChatRoom[]
  messages   Message[]
  likes      Like[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@index([userId])
}

model Product {
  id           Int      @id @default(autoincrement())
  title        String
  price        Float
  discount     Float?
  photo        String
  color        String
  material     String
  size         String
  bulb         String
  manufacturer String
  description  String
  stock        Int      @default(99)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  purchaser    User[]
  options      Option[]
}

model Option {
  id        Int     @id @default(autoincrement())
  index     Int
  name      String
  price     Float?
  stock     Int     @default(99)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Gallery {
  id         Int      @id @default(autoincrement())
  content    String
  photo      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tags       Tag[]
  likes      Like[]
}

model Like {
  user       User     @relation(fields: [userId], references: [id])
  gallery    Gallery  @relation(fields: [galleryId], references: [id])

  userId     Int
  galleryId  Int
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id(name: "id", [userId, galleryId])
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  gallery    Gallery? @relation(fields: [galleryId], references: [id])
  galleryId  Int?
}

model ChatRoom {
  id String @id @default(cuid())

  users User[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
