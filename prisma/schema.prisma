generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  username   String
  loginId    String     @unique
  password   String
  email      String?    @unique
  phone      String?    @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  smsToken   SMSToken[]
  products   Product[]
  chatRooms  ChatRoom[]
  messages   Message[]
  likes      Like[]
  logs       Log[]
  carts      Cart[]
  orders     Order[]
}

model Log {
  id         Int      @id @default(autoincrement())
  user       User?    @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int?
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id           Int        @id @default(autoincrement())
  title        String     @unique
  price        Float
  discount     Float?
  photo        String
  color        String
  material     String
  size         String
  bulb         String
  manufacturer String
  description  String
  stock        Int        @default(99)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  purchaser    User[]
  options      Option[]
  cart_Items   CartItem[]
}

model Option {
  id             Int              @id @default(autoincrement())
  index          Int
  name           String
  price          Int?
  stock          Int              @default(99)
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItemOption CartItemOption[]
  productId      Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  userId    Int        @unique
}

model CartItem {
  id        Int              @id @default(autoincrement())
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Order     Order?           @relation(fields: [orderId], references: [id])
  options   CartItemOption[]
  productId Int
  cartId    Int
  quantity  Int
  orderId   Int?
}

model CartItemOption {
  option     Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId   Int
  cartItem   CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  cartItemId Int
  quantity   Int

  @@id(name: "id", [optionId, cartItemId])
}

model Order {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  cartItems  CartItem[]
  created_at DateTime   @default(now())
}

model Gallery {
  id         Int      @id @default(autoincrement())
  content    String
  photo      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  views      Int      @default(0)
  tags       Tag[]
  likes      Like[]
}

model Like {
  user       User     @relation(fields: [userId], references: [id])
  gallery    Gallery  @relation(fields: [galleryId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  galleryId  Int

  @@id(name: "id", [userId, galleryId])
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  gallery    Gallery? @relation(fields: [galleryId], references: [id])
  galleryId  Int?
}

model ChatRoom {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users      User[]
  messages   Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  userId     Int
  chatRoomId String
}
